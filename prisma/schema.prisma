generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STAFF
  USER
}

enum TypeUser {
  PREMIUM
  FREE
}

model User {
  id           Int        @id @default(autoincrement())
  email        String?    @unique
  userName     String?    @unique @map("username")
  password     String
  profileImage String?    @map("profile_image")
  coverImage   String?    @map("cover_image")
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
  role         UserRole   @default(USER)
  bio          String?
  type         TypeUser   @default(FREE)
  follower     Follow[]   @relation("follower")
  following    Follow[]   @relation("following")
  Stories      Story[]
  Comments     Comment[]
  Favorites    Favorite[]
  Drafts       Draft[]

  @@map("users")
}

model Transaction {
  id        Int      @id @default(autoincrement())
  slipSrc   String   @map("slip_src")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  status    Boolean  @default(false)
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation(name: "follower", fields: [followerId], references: [id])
  followerId  Int      @map("follower_id")
  following   User     @relation(name: "following", fields: [followingId], references: [id])
  followingId Int      @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  @@map("follow")
}

enum Category {
  INSPIRE
  ROMANTIC
  DRAMA
  EXPERIENCE
  KNOWLEDGE
  GENERAL
  HORROR
}

model Story {
  id           Int      @id @default(autoincrement())
  title        String
  content      String   @db.LongText
  totalComment Int      @default(0) @map("total_comment") @db.UnsignedInt
  totalFav     Int      @default(0) @map("total_fav") @db.UnsignedInt
  coverImage   String?  @map("cover_image")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  staffPick    Boolean  @default(false) @map("staff_pick")
  isDelete     Boolean  @default(false)
  userId       Int      @map("user_id")
  user         User     @relation(fields: [userId], references: [id])

  StoryImages StoryImage[]
  Comments    Comment[]
  Favorites   Favorite[]

  @@map("story")
}

model Draft {
  id         Int      @id @default(autoincrement())
  title      String
  content    String   @db.LongText
  coverImage String?  @map("cover_image")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  isDelete   Boolean  @default(false)
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id])

  @@map("draft")
}

model StoryImage {
  id      Int     @id @default(autoincrement())
  image   String?
  storyId Int     @map("story_id")
  story   Story   @relation(fields: [storyId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  isDelete  Boolean  @default(false)
  storyId   Int      @map("story_id")
  story     Story    @relation(fields: [storyId], references: [id])
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
}

model Favorite {
  id      Int   @id @default(autoincrement())
  userId  Int   @map("user_id")
  user    User  @relation(fields: [userId], references: [id])
  storyId Int   @map("story_id")
  story   Story @relation(fields: [storyId], references: [id])
}
